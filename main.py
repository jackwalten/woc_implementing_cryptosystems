import caesar
import atbash
import vigenere
import rsa
import df_key

def main():
    while True:
        cipher = int(input(('Enter your desired cipher:\n' 
                     '[0] for Caesar cipher\n'
                     '[1] for Atbash cipher\n'
                     '[2] for Vigenere cipher\n'
                     '[3] for Diffie-Hellman Key-exchange\n'
                     '[4] for RSA Cryptosystem\n' 
                     '[5] Exit\n'
                     'Enter your choice: ')))
        if cipher == 0:
            choice = int(input(('What do you want to do\n'
                             '[0] Encrypt\n'
                             '[1] Decrypt\n'
                             '[2] Bruteforce\n'
                             '[3] Go back\n'
                             'Enter your choice: ')))
            if choice == 0:
                plaintxt = input("Please enter the text you want to encrypt: ")
                key = int(input("What should be the shift amount: "))
                print("Encrypted Text: ", caesar.encrypt(plaintxt,key))
            elif choice == 1:
                ciphertxt = input("Please enter the text you want to decrpyt: ")
                key = int(input("What should be the shift amount: "))
                print("Decrypted Text:", caesar.decrypt(ciphertxt,key))
            elif choice == 2:
                plaintxt = input("Please enter the text you want to bruteforce: ")
                for key in range(26):
                    print("Rot"+str(key)+": "+caesar.decrypt(plaintxt,key))
            else:
               continue 
        elif cipher == 1:
            choice = int(input(('What do you want to do\n'
                             '[0] Encrypt\n'
                             '[1] Decrypt\n'
                             '[2] Go back\n'
                             'Enter your choice: ')))
            if choice == 0:
                plaintxt = input("Please enter the text you want to encrypt: ")
                print("Encrypted Text:", atbash.encrypt(plaintxt))
            elif choice == 1:
                ciphertxt = input("Please enter the text you want to decrypt: ")
                print("Decrypted Text:", atbash.decrypt(ciphertxt))
            else:
                continue
        elif cipher == 2:
            choice = int(input(('What do you want to do\n'
                             '[0] Encrypt\n'
                             '[1] Decrypt\n'
                             '[2] Go back\n'
                             'Enter your choice: ')))
            if choice == 0:
                plaintxt = input("Please enter the text you want to encrypt: ")
                key = input("Please enter the key: ")
                print("Encrypted Text:", vigenere.encrypt(plaintxt,key))
            elif choice == 1:
                ciphertxt = input("Please enter the text you want to decrypt: ")
                key = input("Please enter the key: ")
                print("Decrypted Text:", vigenere.decrypt(ciphertxt,key))
            else:
                continue
        elif cipher == 3:
            g, p = df_key.generate_dh_paramters() # Public parameters
            Alice = df_key.df_key(g,p)
            Bob = df_key.df_key(g,p)

            print("The value of prime p:", p)
            print("The value of generator g:", g,'\n')

            Alice.gen_privkey()
            Bob.gen_privkey()

            print("The private key a for Alice:",Alice.priv_key)
            print("The private key b for Bob:",Bob.priv_key,'\n')

            Alice.gen_pubkey()
            Bob.gen_pubkey()

            print("The public key A for Alice:",Alice.pub_key)
            print("The public key B for Bob:",Bob.pub_key,'\n')

            Alice.share_key(Bob.pub_key)
            Bob.share_key(Alice.pub_key)

            print("The shared secret s generated by Alice:",Alice.share_key)
            print("The shared secret s generated by Bob:",Bob.share_key)
        elif cipher == 4:
            choice = int(input(('What do you want to do\n'
                             '[0] Encrypt\n'
                             '[1] Decrypt\n'
                             '[2] Go back\n'
                             'Enter your choice: ')))
            if choice == 0:
                p = rsa.generate_prime()
                q = rsa.generate_prime()
                n = p*q
                phi = (p-1)*(q-1)
                e = 65537
                d = pow(e,-1,phi)
                plaintxt = input("Enter the text want to encrypt: ")
                m = int.from_bytes(plaintxt.encode())
                c = pow(m,e,n)
                print("Private Key (d,n): ",(d,n))
                print("Public Key (e,n): ",(e,n))
                print("Encrypted message: ", c)
            elif choice == 1:
                d,n = eval(input("Please enter the Private Key as a comma separated value of (d,n): "))
                c = int(input("Please enter the encrypted number: "))
                m = pow(c,d,n)
                plaintxt = int.to_bytes(m,2048).decode()
                print("Decrypted Message: ",plaintxt)
        elif cipher == 5:
            return False
       
main()